z <- ts(matrix(rnorm(300), 100, 3), start = c(1961, 1), frequency = 12)
class(z)
head(z) # as "matrix"
plot(z, plot.type = "single", lty = 1:3)
str(forecast_data)
forecast_data <- read.csv("C:/Users/Sarah Sullivan/Downloads/forecast_data - Sheet1.csv", stringsAsFactors=FALSE)
str(forecast_data)
forecast_data <- t(forecast_data)
myts <- ts(forecast_data[,1], start=c(2016, 1), end=c(2016, 12), frequency=52)
myts
forecast_data
myts <- ts(forecast_data, start=c(2016, 1), end=c(2016, 12), frequency=52)
myts
myts <- ts(forecast_data, start=c(2016, 0), end=c(2016, 12), frequency=52)
myts
myts <- ts(forecast_data, start=c(2016, 1), end=c(2016, 12), frequency=52)
str(myts)
class(matrix(rnorm(300), 100, 3))
class(forecast_data)
View(forecast_data)
z
y <-ts(forecast_data, start = c(1961, 1), frequency = 52)
y
z
forecast_data[1]
forecast_data[,1]
forecast_data[1]
forecast_data
View(forecast_data)
View(forecast_data)
forecast_data[X]
forecast_data[x]
forecast_data[1]
forecast_data[2]
forecast_data[,2]
forecast_data[1]
forecast_data[1:6,1]
forecast_data[1,1:6]
forecast_data[1,1:8]
colnames(forecast_data)
colnames(forecast_data) <- forecast_data[1,1:8]
forecast_data
rm(forecast_data[1,1:8])
forecast_data[-1, ]
forecast_data <- forecast_data[-1, ]
y <-ts(forecast_data, start = c(1961, 1), frequency = 52)
y
y <-as.ts(forecast_data, start = c(1961, 1), frequency = 52)
y <-ts(forecast_data, start = c(1961, 1), frequency = 52)
y
fit <- ets(y)
library(forecast)
fit <- ets(y)
fit <- ets(z)
fit <- ets(z[1])
fit
plot(fit)
fit <- ets(z[6])
plot(fit)
z
fit <- ets(z[,6])
z[,6]
z[6,]
z[,6]
z[1,6]
z[1:6,6]
z[6]
z[6]
z[7]
z
str(z)
d <- ts(forecast[, 3], start = c(2005, 1), frequency = 12)
d <- ts(forecast_Data[, 3], start = c(2005, 1), frequency = 12)
d <- ts(forecast_data[, 3], start = c(2005, 1), frequency = 12)
fit <- ets(d)
d
d <- ts(forecast_data[3,], start = c(2005, 1), frequency = 12)
d
d <- ts(forecast_data[3,], start = c(2005, 1), frequency = 12)
d
d <- ts(forecast_data[3,], start = c(2005, 1), frequency = 52)
d
d <- ts(forecast_data[3,], start = c(2005, 1), frequency = 52)
d
d <- ts(forecast_data[6,], start = c(2005, 1), frequency = 52)
d
View(forecast_data)
d <- ts(forecast_data[1,], start = c(2005, 1), frequency = 52)
d
d <- ts(forecast_data[,1], start = c(2005, 1), frequency = 52)
d
fit <- ets(d)
plot(fit)
plot(fit)
fit <- ets(d)
d
forecast_data[,1]
as.numeric(forecast_data[,1])
d <- ts(as.numeric(forecast_data[,1]), start = c(2005, 1), frequency = 52)
d
fit <- ets(d)
plot(fit)
forecast_data <- as.numeric(forecast_data)
forecast_data <- read.csv("C:/Users/Sarah Sullivan/Downloads/forecast_data - Sheet1.csv", na.strings="0")
str(forecast_data)
forecast_data <- t(forecast_data)
forecast_data
colnames(forecast_data) <- forecast_data[1,1:8]
forecast_data <- forecast_data[-1, ]
forecast_data <- as.numeric(forecast_data)
forecast_data
forecast_data <- read.csv("C:/Users/Sarah Sullivan/Downloads/forecast_data - Sheet1.csv", stringsAsFactors=FALSE)
str(forecast_data)
forecast_data <- t(forecast_data)
forecast_data
forecast_data <- as.numeric(forecast_data)
forecast_data
colnames(forecast_data) <- forecast_data[1,1:8]
forecast_data <- read.csv("C:/Users/Sarah Sullivan/Downloads/forecast_data - Sheet1.csv", na.strings="0")
str(forecast_data)
forecast_data <- t(forecast_data)
forecast_data
colnames(forecast_data) <- forecast_data[1,1:8]
forecast_data <- forecast_data[-1, ]
forecast_data
forecast_data[,1]
myts <- ts(as.numeric(forecast_data[,1]), start=c(2016, 1), end=c(2016, 12), frequency=52)
myts
plot(myts)
plot(myts)
fit <- ets(myts)
plot(myts)
myts <- ts(as.numeric(forecast_data[,1]), start=c(2016, 1), end=c(2016, 12), frequency=52)
fit <- ets(myts)
View(forecast_data)
plot(myts)
fit
forecast(fit,h=12)
plot(forecast(fit,h=1))
forecast(fit,h=1)
forecast(fit,h=1)[1]
forecast(fit,h=1)[1]
plot(forecast(fit,h=1))
forecast(fit)
forecast(fit,h=1)
myts <- ts(as.numeric(forecast_data[,2]), start=c(2016, 1), end=c(2016, 12), frequency=52)
fit <- ets(myts)
fit
plot(myts)
plot(forecast(fit,h=1))
forecast(fit,h=1)
myts <- ts(as.numeric(forecast_data[,3]), start=c(2016, 1), end=c(2016, 12), frequency=52)
fit <- ets(myts)
fit
plot(myts)
plot(forecast(fit,h=1))
forecast(fit,h=1)
myts <- ts(as.numeric(forecast_data[,4]), start=c(2016, 1), end=c(2016, 12), frequency=52)
fit <- ets(myts)
plot(forecast(fit,h=1))
forecast(fit,h=1)
myts <- ts(as.numeric(forecast_data[,5]), start=c(2016, 1), end=c(2016, 12), frequency=52)
fit <- ets(myts)
plot(forecast(fit,h=1))
forecast(fit,h=1)
myts <- ts(as.numeric(forecast_data[,6]), start=c(2016, 1), end=c(2016, 12), frequency=52)
fit <- ets(myts)
plot(forecast(fit,h=1))
forecast(fit,h=1)
myts <- ts(as.numeric(forecast_data[,7]), start=c(2016, 1), end=c(2016, 12), frequency=52)
fit <- ets(myts)
plot(forecast(fit,h=1))
*** PRODUCED FORECASTS ****
forecast(fit,h=1)
myts <- ts(as.numeric(forecast_data[,8]), start=c(2016, 1), end=c(2016, 12), frequency=52)
fit <- ets(myts)
plot(forecast(fit,h=1))
forecast(fit,h=1)
.231*52
plot(forecast(fit,h=1))
myts <- ts(as.numeric(forecast_data[,8]), start=c(2016, 1), end=c(2016, 12), frequency=52)
forecast_data[,8]
myts <- ts(as.numeric(forecast_data[,4]), start=c(2016, 1), end=c(2016, 12), frequency=52)
fit <- ets(myts)
plot(forecast(fit,h=1))
forecast(fit,h=1)
class(forecast(fit,h=1))
forecast(fit,h=1)
forecast(fit,h=1)
forecast(fit,h=1)[1,]
forecast(fit,h=1)[,1]
forecast(fit,h=1)[1]
forecast(fit,h=1)[1,1]
forecast(fit,h=1)
class(forecast(fit,h=1))
forecast(fit,h=1)$lower
forecast(fit,h=1)$upper
forecast(fit,h=3)$upper
forecast(fit,h=1)
forecast(fit,h=3)$point
forecast(fit,h=1)$point
forecast(fit,h=1)$mean
forecast(fit,h=3)$mean
forecast(fit,h=4)$mean
plot(forecast(fit,h=1))
plot(forecast(fit,h=3))
sum(forecast(fit,h=4)$mean)
sum(forecast(fit,h=3)$mean)
myts <- ts(as.numeric(forecast_data[,1]), start=c(2016, 1), frequency=52)
fit <- ets(myts)
plot(forecast(fit,h=3))
forecast(fit,h=1)
# get sum sales week 13-15
sum(forecast(fit,h=3)$mean)
myts <- ts(as.numeric(forecast_data[,2]), start=c(2016, 1), frequency=52)
fit <- ets(myts)
plot(forecast(fit,h=3))
forecast(fit,h=1)
# get sum sales week 13-15
sum(forecast(fit,h=3)$mean)
myts <- ts(as.numeric(forecast_data[,3]), start=c(2016, 1), frequency=52)
fit <- ets(myts)
plot(forecast(fit,h=3))
forecast(fit,h=1)
# get sum sales week 13-15
sum(forecast(fit,h=3)$mean)
### manually iterating through each book's time-series to obtain forecasts
myts <- ts(as.numeric(forecast_data[,4]), start=c(2016, 1), frequency=52)
fit <- ets(myts)
plot(forecast(fit,h=3))
forecast(fit,h=1)
# get sum sales week 13-15
sum(forecast(fit,h=3)$mean)
myts <- ts(as.numeric(forecast_data[,1]), start=c(2016, 1), frequency=52)
fit <- ets(myts)
plot(forecast(fit,h=3))
forecast(fit,h=1)
# get sum sales week 13-15
sum(forecast(fit,h=3)$mean)
myts <- ts(as.numeric(forecast_data[,2]), start=c(2016, 1), frequency=52)
fit <- ets(myts)
plot(forecast(fit,h=3))
forecast(fit,h=1)
# get sum sales week 13-15
sum(forecast(fit,h=3)$mean)
myts <- ts(as.numeric(forecast_data[,3]), start=c(2016, 1), frequency=52)
fit <- ets(myts)
plot(forecast(fit,h=3))
forecast(fit,h=1)
# get sum sales week 13-15
sum(forecast(fit,h=3)$mean)
### manually iterating through each book's time-series to obtain forecasts
myts <- ts(as.numeric(forecast_data[,4]), start=c(2016, 1), frequency=52)
fit <- ets(myts)
plot(forecast(fit,h=3))
forecast(fit,h=1)
# get sum sales week 13-15
sum(forecast(fit,h=3)$mean)
myts <- ts(as.numeric(forecast_data[,5]), start=c(2016, 1), frequency=52)
fit <- ets(myts)
plot(forecast(fit,h=3))
forecast(fit,h=1)
# get sum sales week 13-15
sum(forecast(fit,h=3)$mean)
myts <- ts(as.numeric(forecast_data[,6]), start=c(2016, 1), frequency=52)
fit <- ets(myts)
plot(forecast(fit,h=3))
forecast(fit,h=1)
# get sum sales week 13-15
sum(forecast(fit,h=3)$mean)
myts <- ts(as.numeric(forecast_data[,7]), start=c(2016, 1), frequency=52)
fit <- ets(myts)
plot(forecast(fit,h=3))
forecast(fit,h=1)
# get sum sales week 13-15
sum(forecast(fit,h=3)$mean)
myts <- ts(as.numeric(forecast_data[,8]), start=c(2016, 1), frequency=52)
fit <- ets(myts)
plot(forecast(fit,h=3))
# get week 13 sales forecasts
forecast(fit,h=1)
# get sum sales forecasts week 13-15
sum(forecast(fit,h=3)$mean)
dput(forecast_data)
test_data <- read.csv("~/dev/santander_kaggle/test_ver2.csv", header=FALSE)
demo()
demo(graphics)
demo(Hershey)
data("Titanic")
View(data("Titanic"))
demo(graphics)
datasets::Titanic
data <- datasets::Titanic
data <- datasets::Titanic
str(data)
head(data)
read.csv(test.csv, header=TRUE)
read.csv("test.csv", header=TRUE)
read.csv("/test.csv", header=TRUE)
getwd()
setwd("C:/Users/Sarah Sullivan/Documents/dev")
setwd("C:/Users/Sarah Sullivan/Documents/dev/titanic_kaggle/")
read.csv("/test.csv", header=TRUE)
test <- read.csv("~/dev/titanic_kaggle/test.csv")
View(test)
setwd("~/dev/titanic_kaggle/")
getwd()
train <- read.csv("~/dev/titanic_kaggle/train.csv")
train <- read.csv("~/dev/titanic_kaggle/train.csv", na.strings = c("NA",""))
train.data <- read.csv("~/dev/titanic_kaggle/train.csv", na.strings = c("NA",""))
test.data <- read.csv("~/dev/titanic_kaggle/test.csv")
train.data$Pclass = factor(train.data$Pclass)
test.data$Survived = factor(test.data$Survived)
test.data$Pclass = factor(test.data$Pclass)
test.data <- read.csv("~/dev/titanic_kaggle/test.csv", na.strings = c("NA",""))
test.data$Survived = factor(test.data$Survived)
test.data$Survived = factor(test.data$Survived)
is.na(train.data$Age)
sum(is.na(train.data$Age))
sum(is.na(train.data$Age)) / length(train.data$Age)
sum(is.na(train.data$Age))
sum(is.na(train.data$Age)) / length(train.data$Age)
sapply(train.data, function(df){
sum(is.na(df==TRUE) /length(df));
})
table(train.data$Embarked, use NA = "always")
train.data$Survived = factor(train.data$Survived)
table(train.data$Embarked, use NA = "always")
head(train.data$Embarked)
table(train.data$Embarked, use NA = "always")
table(train.data$Embarked, use NA = "always") ;
table(train.data$Embarked, useNA = "always") ;
sapply(train.data, function(df){
sum(is.na(df==TRUE) /length(df));
})
sum(is.na(train.data$Embarked))
table(train.data$Embarked, useNA = "always") ;
table(train.data$Embarked[which(is.na(train.data$Embarked))]) = 'S' ;
train.data$Embarked[which(is.na(train.data$Embarked))] = 'S' ;
table(train.data$Embarked, useNA = "always") ;
table(train.data$Age, useNA = "always") ;
View(table(train.data$Age, useNA = "always") ;)
View(table(train.data$Age, useNA = "always"))
plot(table(train.data$Age, useNA = "always"))
age_data <- table(train.data$Age, useNA = "always") ;
plot(age_data)
View(age_data)
View(test)
age_data <- as.data.frame(age_data)
age_data$var1[which(is.na(age_data$var1))] = '0' ;
age_data$var1 <- as.integer(age_data$var1)
age_data <- table(train.data$Age, useNA = "always") ;
View(age_data)
Ameliaview()
install.packages("Amelia")
require(Amelia)
missmap(train.data, main="Missing Map")
Ameliaview()
table(train.data$Embarked, useNA = "always") ;
sum(is.na(train.data$Embarked))
sapply(train.data, function(df){
sum(is.na(df==TRUE) /length(df));
})
train.data$Name = as.character(train.data$Name)
table_words = table(unlist(strsplit(train.data$Name, "\\s+")))
sort(table_words [grep('\\.',names(table_words))], decreasing = TRUE)
library(stringr)
tb = cbind(train.data$Age, str_match(train.data$Name, "[a-zA-z]+\\."))
table(tb[is.na(tb[,1],2])
table(tb[is.na(tb[,1]),2])
mean.mr = mean(train.data$Age[grepl(" Mr\\.", train.data$Name) & !is.na(train.data$Age)])
mean.master = mean(train.data$Age[grepl(" Master\\.", train.data$Name) & !is.na(train.data$Age)])
mean.miss = mean(train.data$Age[grepl(" MMiss\\.", train.data$Name) & !is.na(train.data$Age)])
mean.mrs = mean(train.data$Age[grepl(" Mrs\\.", train.data$Name) & !is.na(train.data$Age)])
mean.dr = mean(train.data$Age[grepl(" Dr\\.", train.data$Name) & !is.na(train.data$Age)])
mean.miss = mean(train.data$Age[grepl(" \\.", train.data$Name) & !is.na(train.data$Age)])
mean.miss = mean(train.data$Age[grepl(" Miss\\.", train.data$Name) & !is.na(train.data$Age)])
train.data$Age[grepl(" Mr\\.", train.data$Name) & is.na(train.data$Age)] = mean.mr
train.data$Age[grepl(" Mrs\\.", train.data$Name) & is.na(train.data$Age)] = mean.mrs
train.data$Age[grepl(" Dr\\.", train.data$Name) & is.na(train.data$Age)] = mean.dr
train.data$Age[grepl(" Miss\\.", train.data$Name) & is.na(train.data$Age)] = mean.miss
train.data$Age[grepl(" Master\\.", train.data$Name) & is.na(train.data$Age)] = mean.master
sapply(train.data, function(df){
sum(is.na(df==TRUE) /length(df));
})
barplot(table(train.data$Survived), main="Passenger Survival", names = c("Perished", "Survived"))
barplot(table(train.data$Pclass), main = "Passenger Class", names = c("first", "seconds", "third"))
barplot(table(train.data$Sex), main = "Passenger Gender")
hist(Train.data$Age, main = "Passenger Age", xlab = "Age")
sapply(train.data, function(df){
hist(train.data$Age, main = "Passenger Age", xlab = "Age")
hist(train.data$Age, main = "Passenger Age", xlab = "Age")
hist(train.data$Age, main = "Passenger Age", xlab = "Age")
hist(train.data$Age, main = "Passenger Age", xlab = "Age")
barplot(table(train.data$SibSp), main = "Passenger Siblings")
hist(train.data$Fare, main = "Passenger Fare", xlab = "Fare")
barplot(table(train.data$Embarked), main = "Port of Embarkation")
counts = table( train.data$Survived, train.data$Sex )
barplot(counts, col = c("darkblue", "red"), legend = c("Perished", "Survived"), main = "Passenger Survival by Sex")
View(counts)
counts
counts
counts = table( train.data$Survived, train.data$Pclass)
barplot(counts, col = c("darkblue", "red"), legend = c("Perished", "Survived"), main = "Passenger Survival by Pclass")
barplot(counts, col = c("darkblue", "red"), legend = c("Perished", "Survived"), main = "Passenger Survival by Pclass")
counts = table( train.data$Sex, train.data$Pclass)
counts = table( train.data$Sex, train.data$Pclass)
barplot(counts, col = c("darkblue", "red"), legend = rownames(counts), main = "Passenger Gender by Class")
hist(train.data$Age[which(train.data$Survived == "0")], main = "Passenger Age Histogram",xlab = "Age", ylab = "Count", col = "blue", breaks = seq(0,80,by=2))
hist(train.data$Age[which(train.data$Survived == "1")], main = "Passenger Age Histogram",xlab = "Age", ylab = "Count", col = "blue", breaks = seq(0,80,by=2))
hist(train.data$Age[which(train.data$Survived == "0")], main = "Passenger Age Histogram",xlab = "Age", ylab = "Count", col = "blue", breaks = seq(0,80,by=2))
hist(train.data$Age[which(train.data$Survived == "1")], main = "Passenger Age Histogram",xlab = "Age", ylab = "Count", col = "blue", breaks = seq(0,80,by=2))
hist(train.data$Age[which(train.data$Survived == "1")], main = "Passenger Age Histogram",xlab = "Age", ylab = "Count", col = "red", add = T, breaks = seq(0,80,by=2))
hist(train.data$Age[which(train.data$Survived == "0")], main = "Passenger Age Histogram",xlab = "Age", ylab = "Count", col = "blue", breaks = seq(0,80,by=2))
hist(train.data$Age[which(train.data$Survived == "0")], main = "Passenger Age Histogram",xlab = "Age", ylab = "Count", col = "blue", breaks = seq(0,80,by=2))
hist(train.data$Age[which(train.data$Survived == "0")], main = "Passenger Age Histogram",xlab = "Age", ylab = "Count", col = "blue", breaks = seq(0,80,by=2))
hist(train.data$Age[which(train.data$Survived == "1")], col = "red", add = T, breaks = seq(0,80,by=2))
boxplot(train.data$Age ~ train.data$Survived,
+ main = "Passenger Survival by Age",
+ xlab = "Survived", ylab = "Age")
rvival rate?
boxplot(train.data$Age ~ train.data$Survived,
+ main = "Passenger Survival by Age"
+ xlab = "Survived", ylab = "Age")
boxplot(train.data$Age ~ train.data$Survived,
+ main = "Passenger Survival by Age"
+ xlab = "Survived", ylab = "Age")
boxplot(train.data$Age ~ train.data$Survived ,
+ main = "Passenger Survival by Age" ,
+ xlab = "Survived", ylab = "Age" )
boxplot(train.data$Age ~ train.data$Survived ,
+ main = "Passenger Survival by Age" ,
+ xlab = "Survived",
+ ylab = "Age" )
boxplot(train.data$Age ~ train.data$Survived ,
+ main = "Passenger Survival by Age" ,
+ xlab = "Survived",
+ ylab = "Age" )
boxplot(train.data$Age ~ train.data$Survived ,
+ main = "Passenger Survival by Age" ,
+ xlab = "Survived",
+ ylab = "Age"
# what's the relationship between age and survival rate?
boxplot(train.data$Age ~ train.data$Survived , main = "Passenger Survival by Age" ,
+ xlab = "Survived",
+ ylab = "Age" )
boxplot(train.data$Age ~ train.data$Survived , main = "Passenger Survival by Age" ,
+ xlab = "Survived", ylab = "Age" )
boxplot(train.data$Age ~ train.data$Survived , main = "Passenger Survival by Age" , xlab = "Survived", ylab = "Age" )
train.child = train.data$Survived[train.data$Age < 13]
length(train.child[which(train.child == 1)]) / length(train.child)
train.youth = train.data$Survived[train.data$Age >= 15 & train.data$Age <25 ]
length(train.youth[which(train.youth == 1 )]) / length(train.youth)
train.youth = train.data$Survived[train.data$Age >= 15 & train.data$Age <25 ]
length(train.youth[which(train.youth == 1 )]) / length(train.youth)
train.adult = train.data$Survived[train.data$Age >= 25 & train.data$Age <65 ]
length(train.adult[which(train.adult == 1 )]) / length(train.adult)
train.senior = train.data$Survived[train.data$Age >= 65 ]
length(train.senior[which(train.senior == 1 )]) / length(train.senior)
